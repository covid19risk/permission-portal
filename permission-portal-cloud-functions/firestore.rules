rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
		// Disallow all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }
    
   	function isSignedIn() {
    	return request.auth != null;
    }

    function isAdmin() {
      return request.auth.token.isAdmin == true;

      //  in case you need to test directly in firebase console, the above rule would not work since auth token would not have the claim
      // use the below line instead
      // return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin;
    }	    

    function isInOrganization(organizationID) {
      return request.auth.token.organizationID == organizationID;
    }
    
    function isSelfOrAdminInOrg(email, organizationID) {
    	let isSelf = request.auth.token.email == email;
      return isSelf || (isAdmin() && isInOrganization(organizationID));
    }

    function isSelf(){
      return isSignedIn() && (request.auth.token.email == resource.id)
    } 

    function isNotEscalatingPrevileges() {
      return ( resource.data.isAdmin == request.resource.data.isAdmin && resource.data.isSuperAdmin == request.resource.data.isSuperAdmin )
    }

    match /users/{email} {
      allow read, write: if isSignedIn() && isAdmin() && isInOrganization(resource.data.organizationID);
      allow read : if isSelf();
      allow update : if isSelf() && isNotEscalatingPrevileges();
    }

    match /organizations/{organizationID} {
      allow read: if isSignedIn() && isInOrganization(organizationID);
      allow write: if isSignedIn() && isAdmin() && isInOrganization(organizationID);
    }
  }
}